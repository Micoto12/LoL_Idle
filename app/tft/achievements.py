from typing import List, Dict, Any

def define_achievements() -> List[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –∏—Ö —É—Å–ª–æ–≤–∏—è–º–∏."""
    return [
        {
            "id": "top1",
            "name": "–ß–µ–º–ø–∏–æ–Ω!",
            "description": "–ó–∞–Ω—è—Ç—å 1 –º–µ—Å—Ç–æ –≤ –º–∞—Ç—á–µ.",
            "icon": "üèÜ",
            "condition": lambda match_data, player_data: player_data['placement'] == 1
        },
        {
            "id": "level9",
            "name": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
            "description": "–î–æ—Å—Ç–∏—á—å 9 —É—Ä–æ–≤–Ω—è –≤ –º–∞—Ç—á–µ.",
            "icon": "üìà",
            "condition": lambda match_data, player_data: player_data['level'] == 9
        },
        {
            "id": "20gold",
            "name": "–ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å",
            "description": "–ó–∞–∫–æ–Ω—á–∏—Ç—å –º–∞—Ç—á —Å 20+ –∑–æ–ª–æ—Ç–∞.",
            "icon": "üí∞",
            "condition": lambda match_data, player_data: player_data['gold_left'] >= 20
        },
        {
            "id": "6trait",
            "name": "–ú–∞—Å—Ç–µ—Ä —Å–∏–Ω–µ—Ä–≥–∏–π",
            "description": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω–µ—Ä–≥–∏—é 6-–≥–æ —É—Ä–æ–≤–Ω—è.",
            "icon": "üß¨",
            "condition": lambda match_data, player_data: any(trait['tier_current'] >= 6 for trait in player_data['traits'])
        },
        {
            "id": "3star",
            "name": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —é–Ω–∏—Ç",
            "description": "–ò–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ 3-–∑–≤–µ–∑–¥–æ—á–Ω–æ–≥–æ —é–Ω–∏—Ç–∞.",
            "icon": "‚≠ê",
            "condition": lambda match_data, player_data: any(unit['tier'] == 3 for unit in player_data['units'])
        },
    ]

def check_achievements_for_player(game_name: str, tag_line: str, region: str, match_count: int = 3) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ –∏–≥—Ä–æ–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö.
    """
    from .api_call import get_puuid_by_riot_id, get_match_ids_by_puuid, get_match_data

    achievements_list = define_achievements()
    unlocked_achievements = []
    analyzed_matches = []

    try:
        puuid = get_puuid_by_riot_id(game_name, tag_line, region)
        match_ids = get_match_ids_by_puuid(puuid, region, count=match_count)

        for match_id in match_ids:
            match_data = get_match_data(match_id, region)
            participants = match_data['info']['participants']
            player_data = next((p for p in participants if p['puuid'] == puuid), None)

            if not player_data:
                continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
            match_summary = {
                "id": match_id,
                "placement": player_data['placement'],
                "level": player_data['level'],
                "gold_left": player_data['gold_left'],
                "last_round": player_data['last_round'],
                "traits": [
                    {
                        "name": trait['name'].replace("TFT15_", ""),
                        "tier": trait['tier_current']
                    }
                    for trait in player_data['traits'] if trait['tier_current'] > 0
                ],
                "units": [
                    {
                        "character": unit['character_id'].replace("TFT15_", "").replace("tft15_", ""),
                        "tier": unit['tier'],
                        "items": (
                            [
                                n.replace("TFT_Item_", "").replace("TFT15_Item_", "").replace("TFT_Artifact_", "Artifact_")
                                for n in (unit.get('itemNames', []) if isinstance(unit.get('itemNames'), list) else [])
                                if isinstance(n, str)
                            ]
                            if isinstance(unit.get('itemNames'), (list, type(None))) else []
                        )
                    }
                    for unit in player_data['units']
                ],
                "unlocked_in_match": []
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            for ach in achievements_list:
                if ach["id"] not in [a["id"] for a in unlocked_achievements]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
                    if ach["condition"](match_data, player_data):
                        unlocked_achievements.append(ach)
                        match_summary["unlocked_in_match"].append(ach)
        
            analyzed_matches.append(match_summary)

    except Exception as e:
        return {
            "error": str(e),
            "unlocked_achievements": [],
            "analyzed_matches": []
        }

    return {
        "player_name": f"{game_name}#{tag_line}",
        "unlocked_achievements": unlocked_achievements,
        "analyzed_matches": analyzed_matches,
        "error": None
    }